1.友元（Friend） 是 C++ 中的一种特殊机制，允许某个类或函数访问另一个类的私有（private）或保护（protected）成员
C++ 支持三种友元:
友元函数:普通函数或全局函数被声明为某个类的友元，可以访问该类的私有成员。
友元类:整个类被声明为另一个类的友元，该类的所有成员函数都可以访问目标类的私有成员。
友元成员函数:某个类的特定成员函数被声明为另一个类的友元，仅该函数能访问目标类的私有成员。

需要外部函数访问私有数据（如运算符重载 operator<< 或 operator+）。
两个类紧密耦合（如 User 和 UserManager，UserManager 需要直接操作 User 的私有数据）。
提高性能（避免频繁调用 getter/setter）。


// 声明友元类（UserManager 可以访问 User 的私有成员）
class User{
public:
    friend class UserManager;
    // 仅允许 Logger::logUserInfo 访问私有成员
    friend void Logger::logUserInfo(const User& user);
    // 声明友元函数（这个函数不是User的成员！）
    friend void printUser(const User& user); 
};

class Logger {
public:
    void logUserInfo(const User& user);  // 声明但不定义
};



友元关系是单向的,友元不能继承


2.static静态变量
(2.1)静态全局变量​
在任何函数体外定义的变量，默认具有静态存储期
int global_var;         // 全局变量（隐含static存储期） 跨文件（通过extern）
static int static_var;  // 静态全局变量 仅当前文件

文件作用域​​：静态全局变量仅在定义它的文件内可见（通过static显式声明时）
​​生命周期​​：程序启动时创建，程序结束时销毁

(2.2)静态局部变量​
在函数体内用static修饰的变量
初始化时机​​：第一次执行到定义处时初始化
​​内存位置​​：存储在全局数据区而非栈区

(2.3)静态成员变量（类作用域）​
class MyClass {
public:
    static int shared_var;  // 声明
};
int MyClass::shared_var = 0;  // 定义（必须放在.cpp文件）
类共享状态​​：所有类实例共享同一份变量
​​访问方式​​：既可以通过对象访问，也可以通过类名访问
​​生命周期​​：同全局变量

(2.4)静态成员函数​
class MyClass {
public:
    static void helper() {  // 静态成员函数
        // 不能访问非静态成员！
    }
};
只能访问静态成员变量
不需要对象实例即可调用（MyClass::helper()）
没有this指针

// user_manage.hpp
class UserManage {
private:
    static std::unordered_map<std::string, std::unique_ptr<User>> users;  // 静态成员
public:
    // ...接口函数
};

// user_manage.cpp
std::unordered_map<std::string, std::unique_ptr<User>> UserManage::users;  // 定义
对于我之前存在的问题，可以将哈希表改成static静态成员变量，所有UserManage实例共享同一用户数据库，避免了局部实例导致的数据丢失问题。


3.如果基类把函数设成irtual，那么派生类一定需要进行重写吗？
如果派生类不重写虚函数，它会​​直接继承基类的实现​​。调用该函数时，会执行基类版本的逻辑。
纯虚函数（Pure Virtual）​​：如果基类将虚函数声明为纯虚（= 0），则派生类​​必须重写​​。派生类用 override 显式标记重写的函数。

4.当类中的构造函数像下面这样定义需要3个参数后，因为没有定义默认构造函数，所以定义User对象时必须要有三个参数
    User(const int type,const std::string& name,const std::string&passwd) : user_type(type),user_name(name),hash_passwd(passwd),salt(generateSalt()){
        hash_passwd = hashPasswd(passwd,salt);
}

5.即使是private也可以在cpp文件中进行定义吗？
是这样的。
这里的user_name不应该是保护变量吗？不能直接指针指向这个变量呀？
可以通过定义一个公共函数来得到一些protect或者private的变量吗？。

​​私有成员（private）​​：只有​​当前类的成员函数​​和​​友元（friend）​​可以访问。
​​保护成员（protected）​​：只有​​当前类及其派生类的成员函数​​和​​友元​​ 可以访问。
​​跨类访问​​：即使两个对象属于同一个类，一个对象也不能直接访问另一个对象的protected/private 成员。

6.std::unordered_map<std::string,User*> users;
给我详细解释一下std::unordered_map和其一些用法以及和std::map的区别还有pair？
std::unordered_map 是 C++ STL 中的关联容器，它存储键值对（key-value pairs），使用哈希表实现，提供平均 O(1) 时间复杂度的查找、插入和删除操作。
​​基于哈希表​​：通过哈希函数将键映射到存储位置
​​无序存储​​：元素不以任何特定顺序存储
​​唯一键​​：每个键只能在 map 中出现一次
​​快速访问​​：平均情况下常数时间访问

// 插入元素
users["Bridge"] = new User(0,"Bridge","123456");
users.insert({"Bridge",new User(0,"Bridge","123456")});

emplace 是 C++ 容器（如 std::unordered_map）提供的高效插入方法，它直接在容器内部构造元素，​​避免了临时对象的创建和拷贝/移动操作​​。
相比 insert（需要先构造 pair 再插入），emplace 直接在内存中构造键值对，效率更高。


// 访问元素
User* alice = users["alice"];
如果键不存在会自动插入
User* bob = users.at("bob");
如果键不存在会抛出异常

// 检查键是否存在
if(users.find("bob") != users.end()){
    //键存在
}
user.end()是容器的最后一位元素的下一位吗？
end() ​​不指向最后一个元素本身​​，而是指向最后一个元素之后的“虚拟”位置
C++ STL 容器（包括 std::unordered_map、std::map、std::vector 等）中，​​container.end() 返回的迭代器指向容器最后一个元素的下一个位置​​

// 删除元素
users.erase("Alice");

// 遍历元素
for (const auto& pair : users) {
    std::cout << "Key: " << pair.first << ", Value: " << pair.second << "\n";
}

// 大小和容量
size_t num_users = users.size();
bool is_empty = users.empty();

std::pair 是一个模板类，用于将两个值组合成一个单一对象。在 unordered_map 中，每个元素都是一个 pair，其中：
first 是键（key）
second 是值（value）

// 创建一个pair
std::pair<std::string, User*> user_pair("Alice", new User(...));

// 访问pair的成员
std::string key = user_pair.first;
User* value = user_pair.second;

7.如果一个类中有的函数中new了一个新的指针，但是函数结束时并delete，那么类的析构函数在default的情况下会自动delete防止内存泄漏吗？为什么这样会导致内存泄漏呢？
​​如果类成员函数内部 new 了一个指针但未 delete，且类的析构函数是默认的（= default），则会导致内存泄漏​​。
默认析构函数（~ClassName() = default）​​：
只会释放类自身的成员变量占用的内存（如 int、std::string 等），但​​不会自动释放成员函数中动态分配的指针​​（如通过 new 创建的对象）。
(7.1)动态分配的内存（new）必须显式释放（delete），否则程序运行时会逐渐耗尽内存。
(7.2)使用智能指针
#include <memory>
class Example {
public:
    void createObject() {
        auto ptr = std::make_unique<int>(42);  // 自动管理生命周期
        // 函数结束时 unique_ptr 会自动释放内存
    }
    // 无需显式析构函数
};

8.std::make_unique是什么？std::unique_ptr？
std::unique_ptr:C++11 引入的智能指针，用于​​独占所有权​​管理动态分配的对象（替代 new/delete）。
对象生命周期结束时（如作用域结束、容器销毁），自动释放内存。
​​不可拷贝​​（独占所有权），但支持移动语义（std::move）。

std::make_unique​:C++14 引入的辅助函数，​​安全创建 unique_ptr​​（避免直接 new）。


emplace 失败	unique_ptr 不能直接构造 User	改用 std::make_unique 或显式 new
return nullptr 报错	非常量引用不能绑定到字面量	改用异常、裸指针或 std::optional


9.容器find(键)得到的是指向值的指针吗？      
find() 返回迭代器​​：通过 it->second 访问值（User*） 类似于指针的对象，但它是 STL 容器提供的抽象，用于遍历和访问容器中的元素。

此外像下面这种直接使用it不行吗？

为什么还需要创建一个新的User指针？
const User* user = it->second;  // 直接获取已存储的用户指针

这样还没有删除不会导致内存泄露吗？
it作为一个指针，还是作为一个迭代器？
不会导致内存泄露吗？
是不是只有new一个指针才需要考虑内存泄露的问题？

只有手动 new 的对象需要手动 delete。
迭代器本身不涉及内存管理，它只是访问容器内容的工具。


bool UserManage::Login(const int& type, const std::string& name, const std::string& passwd) const{
    auto it = users.find(name);
    if(it != users.end()){
        return it->second->Gethash_passwd() == hashPasswd(passwd,it->second->Getsalt());
    }
    std::cout << "Faile to login!" << std::endl;
    return false;
}

10.使用 GDB 调试​​
cmake -DCMAKE_BUILD_TYPE=Debug ..
make
gdb ./EduMatchSystem


11.我在每个case中每次操作都创建了新的 UserManage 实例，导致数据无法持久保存。
导致了局部实例的问题。但是当break后会导致对象析构数据销毁。
unordered_map是一个成员变量，生命周期与UserManage实例绑定。
定义一个全局变量，使用静态变量，通过添加txt文件实现数据永久性存储，每次构造函数先把数据读入后再进行哈希查找。


12.随着进程结束后析构掉哈希表中存在的数据，计划将哈希表中的数据进行存入txt文件。
在每次创建UserManage对象时，load加载入txt中的数据，如果register或者delete数据时就更新编辑txt数据。
数据存入txt文件算是外存吗？

13.非成员函数上不允许使用类型限定符

14.std::unique_ptr 的不可复制性
UserManage::GetUsers() 尝试返回 unordered_map 的副本，但 map 中的 unique_ptr 不可拷贝
unique_ptr 是独占所有权的智能指针，禁止拷贝构造（只能移动）

***     返回只读引用
const auto& GetUsers() const { return users; }  


(***)15.
​​(1)emplace 与 unique_ptr 的问题​​：
在 LoadUsers 函数中，你使用了 users.emplace(user->GetName(), user)
unique_ptr 是不可复制的，只能移动
emplace 试图构造一个 pair<const string, unique_ptr<User>>，但参数传递方式不正确
(2)​​fromFile 返回的 unique_ptr​​：
你创建了一个局部 unique_ptr 然后尝试插入到 map 中
这会导致所有权转移问题

std::move
用于​​将对象标记为“可移动”（右值引用）​​，从而允许高效地转移资源（如动态内存、文件句柄等），而不是进行昂贵的深拷贝。
​​不实际移动任何数据​​，仅仅是类型转换
如果对象没有移动构造函数（例如基本类型 int、float），则会回退到拷贝。


16.insert()、emplace()、emplace_back()各有什么区别？此外std::pair为什么需要std::make_pair来构造一个std::pair类型？
(1)insert()
用于在容器的指定位置插入元素（如 vector、list、map 等）
​(2)​emplace()
用于在容器的指定位置​​就地构造​​元素（避免拷贝或移动）。
直接传递构造参数给元素的构造函数，直接在容器内存中构造对象。
适用于复杂对象（如 std::pair、自定义类），避免临时对象的构造和拷贝。
std::vector<std::pair<int, std::string>> v;
v.emplace(v.begin(), 1, "one"); // 直接构造 pair(1, "one")
(3)emplace_back()
emplace() 的特化版本，专用于在容器末尾（如 vector、deque、list）就地构造元素。
比 push_back() 更高效，因为 push_back() 需要先构造临时对象再移动或拷贝到容器。

insert() 需要已构造的对象（可能涉及拷贝/移动）。
emplace() 和 emplace_back() 直接通过参数构造对象，避免额外开销。

​​std::make_pair 的作用​​：
是一个模板函数，用于自动推导 std::pair 的模板参数类型。
避免手动指定类型，简化代码。
示例：
auto p = std::make_pair(42, "hello"); // 自动推导为 std::pair<int, const char*>
​​直接构造 std::pair 的问题​​：
如果手动构造 std::pair，必须显式指定类型：
std::pair<int, std::string> p(42, "hello"); // 需要明确类型


17.如果是智能指针的内容，也是可以通过std::,move进行移动是吗？智能指针禁止拷贝构造是怎样的？
std::unique_ptr禁止拷贝构造/赋值,允许移动构造/移动赋值​​（通过 std::move 转移所有权）。

std::unique_ptr<int> p1 = std::make_unique<int>(42);
// std::unique_ptr<int> p2 = p1; // 错误！禁止拷贝
std::unique_ptr<int> p2 = std::move(p1); // 正确！移动构造    

p1 被 std::move 后变为 nullptr​​，所有权完全转移给 p2。
​​禁止拷贝​​，确保资源不会被多个 unique_ptr 管理。


18.继承的派生类的指针能够指向基类吗？

基类指针可以指向派生类
派生类指针不能直接指向基类对象 

比如teacher类是继承类user，tearcher类能够使用user类的成员变量吗?
基类成员的访问权限​​
​​public​​：派生类可以直接访问。
​​protected​​：派生类可以直接访问，但外部代码不能。
​​private​​：派生类​​不能直接访问​​（只能通过基类的 public/protected 方法间接访问）。

19.